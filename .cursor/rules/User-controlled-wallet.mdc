# User-Controlled Wallet End-to-End Guide

This document describes the main workflow for creating and initializing a user for your application, managing session tokens, performing user account initialization, and checking wallet status. Each section includes a code sample for developers.

---

## 1. Create a New User

To begin the end-to-end process, you must create and initialize users who will ultimately be using your application. A user, representing the end-user of your app, is identified through a `userId`. This `userId` serves as the account identifier encompassing all associated wallets, assets, and transactions for that specific user.

```go
import (
	"fmt"
	"strings"
	"net/http"
	"io"
)

func main() {
	url := "https://api.circle.com/v1/w3s/users"
	payload := strings.NewReader("{\"userId\":\"<USER_ID>\"}")

	req, _ := http.NewRequest("POST", url, payload)
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Authorization", "Bearer <YOUR_API_KEY>")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)

	fmt.Println(string(body))
}
```

---

## 2. Acquire a Session Token

Once you have successfully created a user, you'll acquire a session token which authenticates the user's session within your app and has a validity period of 60 minutes. Typically, you create a session token when the user logs in. Once created, we return an `encryptionKey` and a `userToken`. The `userToken` is the session identifier, and the `encryptionKey` is a randomly generated encryption/decryption key ensuring session security.

```go
import (
	"fmt"
	"strings"
	"net/http"
	"io"
)

func main() {
	url := "https://api.circle.com/v1/w3s/users/token"
	payload := strings.NewReader("{\"userId\":\"<USER_ID>\"}")

	req, _ := http.NewRequest("POST", url, payload)
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Authorization", "Bearer <YOUR_API_KEY>")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)

	fmt.Println(string(body))
}
```

---

## 3. Initialize the User Account

User initialization is a critical step where you create the user account and provision a wallet for a specified blockchain at account creation.

### Key Concepts

- **Idempotent Requests**: Use an idempotency key (a unique identifier for the request) to ensure that repeated requests with the same key do not create duplicate entities.
- **Challenges**: A challenge is initiated when end-users are prompted to take a specific action (e.g., setting a PIN or recovery method) to authorize sensitive operations securely.

The first challenge involves setting a PIN (encrypted on input) and creating a recovery method (e.g., security questions), ensuring only the user has access to their wallet and can recover it if needed.

```go
import (
	"fmt"
	"strings"
	"net/http"
	"io"
)

func main() {
	url := "https://api.circle.com/v1/w3s/user/initialize"
	payload := strings.NewReader("{\"idempotencyKey\":\"<IDEMPOTENCY_KEY>\",\"blockchains\":[\"<BLOCKCHAIN>\"]}")

	req, _ := http.NewRequest("POST", url, payload)
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Authorization", "Bearer <YOUR_API_KEY>")
	req.Header.Add("X-User-Token", "<USER_TOKEN>")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)

	fmt.Println(string(body))
}
```

---

## 4. Check Wallet Status

To verify the status of wallets associated with a user, make the following GET request.

```go
import (
	"fmt"
	"net/http"
	"io"
)

func main() {
	url := "https://api.circle.com/v1/w3s/wallets?userId=__USER-ID__"

	req, _ := http.NewRequest("GET", url, nil)
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Authorization", "Bearer <YOUR_API_KEY>")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)

	fmt.Println(string(body))
}
```

---