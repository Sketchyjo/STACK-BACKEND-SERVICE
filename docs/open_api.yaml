openapi: 3.1.0
info:
  title: STACK API â€“ Funding & Investing (MVP)
  version: 0.1.0
  description: |
    OpenAPI spec covering core MVP surfaces for **Funding** and **Investing**.
    Security via JWT Bearer. All responses are JSON. Monetary values use strings in decimal notation.
servers:
  - url: https://api.stack.app/v1
    description: Production
  - url: https://staging.api.stack.app/v1
    description: Staging
security:
  - bearerAuth: []
tags:
  - name: Funding
    description: Deposit addresses, webhooks, confirmations, balances
  - name: Investing
    description: Baskets catalog, orders, portfolio
  - name: Webhooks
    description: Inbound webhooks from chains/brokerage
paths:
  /funding/deposit/address:
    post:
      tags: [Funding]
      summary: Generate or retrieve a deposit address for a specific chain
      operationId: createDepositAddress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositAddressRequest'
      responses:
        '200':
          description: Address returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositAddressResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /funding/confirmations:
    get:
      tags: [Funding]
      summary: List recent funding confirmations for the authenticated user
      operationId: listFundingConfirmations
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        '200':
          description: Paginated confirmations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundingConfirmationsPage'
        '401': { $ref: '#/components/responses/Unauthorized' }
  /balances:
    get:
      tags: [Funding]
      summary: Get the user's current balances (buying power, pending, etc.)
      operationId: getBalances
      responses:
        '200':
          description: Current balances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }

  /baskets:
    get:
      tags: [Investing]
      summary: List curated baskets
      operationId: listBaskets
      responses:
        '200':
          description: Curated basket catalog
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Basket' }
  /baskets/{id}:
    get:
      tags: [Investing]
      summary: Get a single basket by ID
      operationId: getBasket
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Basket details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Basket' }
        '404': { $ref: '#/components/responses/NotFound' }

  /orders:
    post:
      tags: [Investing]
      summary: Place a basket order (buy/sell)
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderCreate' }
      responses:
        '201':
          description: Order accepted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409': { $ref: '#/components/responses/Conflict' }
    get:
      tags: [Investing]
      summary: List orders for the current user
      operationId: listOrders
      parameters:
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/OrderStatus' }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        '200':
          description: Paginated order list
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrdersPage' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /orders/{id}:
    get:
      tags: [Investing]
      summary: Get order by ID
      operationId: getOrder
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
        '404': { $ref: '#/components/responses/NotFound' }

  /portfolio:
    get:
      tags: [Investing]
      summary: Get current portfolio positions and valuations
      operationId: getPortfolio
      responses:
        '200':
          description: Current portfolio snapshot
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Portfolio' }
        '401': { $ref: '#/components/responses/Unauthorized' }

webhooks:
  chainDeposit:
    post:
      tags: [Webhooks]
      summary: Inbound chain webhook for deposits/confirmations (EVM/Solana)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ChainDepositWebhook' }
      responses:
        '200':
          description: Acknowledged
  brokerageFills:
    post:
      tags: [Webhooks]
      summary: Inbound brokerage fills/exec reports
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BrokerageFillWebhook' }
      responses:
        '200':
          description: Acknowledged

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Invalid input
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Unauthorized:
      description: Missing or invalid token
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Conflict:
      description: State conflict (e.g., insufficient balance)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  schemas:
    # === Funding ===
    Chain:
      type: string
      description: Target blockchain network
      enum: [Aptos, Solana, polygon, starknet]
    Stablecoin:
      type: string
      enum: [USDC]
    DepositAddressRequest:
      type: object
      required: [chain]
      properties:
        chain: { $ref: '#/components/schemas/Chain' }
    DepositAddressResponse:
      type: object
      required: [chain, address]
      properties:
        chain: { $ref: '#/components/schemas/Chain' }
        address: { type: string, description: 'Chain-specific address; EVM=0x..., Sol=base58' }
        qrCode: { type: string, format: uri, description: 'Optional QR image URL' }
    FundingConfirmation:
      type: object
      required: [id, chain, token, amount, status, confirmedAt]
      properties:
        id: { type: string, format: uuid }
        chain: { $ref: '#/components/schemas/Chain' }
        txHash: { type: string }
        token: { $ref: '#/components/schemas/Stablecoin' }
        amount: { type: string, pattern: '^[0-9]+(\.[0-9]+)?$' }
        status: { type: string, enum: [pending, confirmed, failed] }
        confirmedAt: { type: string, format: date-time }
    FundingConfirmationsPage:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/FundingConfirmation' }
        nextCursor: { type: string, nullable: true }
    BalancesResponse:
      type: object
      properties:
        buyingPower: { type: string, pattern: '^[0-9]+(\.[0-9]+)?$' }
        pendingDeposits: { type: string, pattern: '^[0-9]+(\.[0-9]+)?$' }
        currency: { type: string, example: USD }

    ChainDepositWebhook:
      type: object
      required: [chain, address, token, amount, txHash, blockTime]
      properties:
        chain: { $ref: '#/components/schemas/Chain' }
        address: { type: string }
        token: { $ref: '#/components/schemas/Stablecoin' }
        amount: { type: string }
        txHash: { type: string }
        blockTime: { type: string, format: date-time }
        signature: { type: string, description: 'HMAC or provider signature' }

    # === Investing ===
    Basket:
      type: object
      required: [id, name, description, riskLevel, composition]
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        description: { type: string }
        riskLevel: { type: string, enum: [conservative, balanced, growth] }
        composition:
          type: array
          items:
            type: object
            required: [symbol, weight]
            properties:
              symbol: { type: string, example: VTI }
              weight: { type: number, minimum: 0, maximum: 1 }
    OrderSide:
      type: string
      enum: [buy, sell]
    OrderStatus:
      type: string
      enum: [accepted, pending, partially_filled, filled, failed, canceled]
    OrderCreate:
      type: object
      required: [basketId, side, amount]
      properties:
        basketId: { type: string, format: uuid }
        side: { $ref: '#/components/schemas/OrderSide' }
        amount: { type: string, description: 'Decimal amount in account currency' }
        idempotencyKey: { type: string, description: 'Prevents duplicate orders' }
    Order:
      type: object
      required: [id, basketId, side, amount, status, createdAt]
      properties:
        id: { type: string, format: uuid }
        basketId: { type: string, format: uuid }
        side: { $ref: '#/components/schemas/OrderSide' }
        amount: { type: string }
        status: { $ref: '#/components/schemas/OrderStatus' }
        brokerageRef: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    OrdersPage:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Order' }
        nextCursor: { type: string, nullable: true }

    Portfolio:
      type: object
      required: [currency, positions, totalValue]
      properties:
        currency: { type: string, example: USD }
        positions:
          type: array
          items:
            type: object
            required: [basketId, quantity, avgPrice, marketValue]
            properties:
              basketId: { type: string, format: uuid }
              quantity: { type: string }
              avgPrice: { type: string }
              marketValue: { type: string }
        totalValue: { type: string }

    BrokerageFillWebhook:
      type: object
      required: [orderId, fills]
      properties:
        orderId: { type: string, format: uuid }
        status: { $ref: '#/components/schemas/OrderStatus' }
        fills:
          type: array
          items:
            type: object
            required: [symbol, quantity, price]
            properties:
              symbol: { type: string }
              quantity: { type: string }
              price: { type: string }
        signature: { type: string }

    # === Common ===
    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: string, example: BAD_REQUEST }
        message: { type: string }
        details: { type: object, additionalProperties: true }
